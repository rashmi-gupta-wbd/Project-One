name: Post Deployment Check Validation

# since we want the dynamic name, we are commenting out the first name format and writing the second 
# run-name: Validate ${{ inputs.deploy_job }} from ${{ inputs.project }}
run-name: ${{ needs.deploy.outputs.deploy_job }} from ${{ needs.deploy.outputs.project }}

# Trigger on deployment
# on:
#   push:
#     branches:
#       - main  # Make sure your push is going to `main`

#we want to trigger the event after the deploy-validations workflow is done processing 
on:
  workflow_run:
    workflows: ["Deploy workflow"]
    types:
      - completed
  

  workflow_dispatch:
    inputs:
      environment:
        description: environment
        default: env1
        required: true
        type: choice
        options:
          - env1
          - env2
          - env3
          - env4
          - env5
          - env6
          - env7
          - env8
          - env9
          - env10
      project:
        description: the “___” project directory containing the job
        required: true
      deploy_job:
        description: job name
        required : true

  #we are commenting out deployment_sattus to see more about its function. 
  deployment_status:
    types: [success]

jobs:
  post-deploy-validation:
    runs-on: macos-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Extract the necessary outputs from the deploy workflow
      - name: Get deploy job and project from deploy workflow
        id: get_outputs
        run: |
          echo "Deploy Job: ${{ github.event.workflow_run.output.deploy_job }}"
          echo "Project: ${{ github.event.workflow_run.output.project }}"
          echo "deploy_job=${{ github.event.workflow_run.output.deploy_job }}" >> $GITHUB_ENV
          echo "project=${{ github.event.workflow_run.output.project }}" >> $GITHUB_ENV

      # Validate the deployment with the extracted values
      - name: Post-deployment validation message
        run: |
          echo "Validating deployment of job: ${{ env.deploy_job }} from project: ${{ env.project }}"
        shell: bash

#we need our job to do more than print message. 
# jobs:
#   print-message:
#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         os: [macos-latest]

#     steps:
#       # Checkout the code from the repository
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Print the message
#       - name: Print deployment message
#         run: |
#           echo "this string is printed on deployment"
#         shell: bash # By default, bash works across Linux and macOS
        
      
