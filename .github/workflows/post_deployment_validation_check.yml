name: Post Deployment Check Validation

# since we want the dynamic name, we are commenting out the first name format and writing the second 
# run-name: Validate ${{ inputs.deploy_job }} from ${{ inputs.project }}
# run-name: Validate ${{ needs.deploy.outputs.deploy_job }} from ${{ needs.deploy.outputs.project }} #didnt work, needs not there 
run-name: Validate Workflow for ${{ github.event.workflow_run.head_commit.message }}
# Trigger on deployment
# on:
#   push:
#     branches:
#       - main  # Make sure your push is going to `main`

#we want to trigger the event after the deploy-validations workflow is done processing 
on:
  workflow_run:
    workflows: ["Deploy workflow"]
    types:
      - completed
  

  workflow_dispatch:
    inputs:
      environment:
        description: environment
        default: env1
        required: true
        type: choice
        options:
          - env1
          - env2
          - env3
          - env4
          - env5
          - env6
          - env7
          - env8
          - env9
          - env10
      project:
        description: the “___” project directory containing the job
        required: true
      deploy_job:
        description: job name
        required : true

  #we are commenting out deployment_sattus to see more about its function. 
  deployment_status:
    types: [success]

jobs:
  validate:
    runs-on: macos-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the workflow run ID and use the GitHub API to fetch the outputs
      - name: Fetch outputs from deploy workflow
        id: fetch_outputs
        uses: actions/github-script@v6
        with:
          script: |
            const runId = ${{ github.event.workflow_run.id }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch the workflow run data from GitHub API
            const workflowRun = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: runId
            });

            // Extract outputs from the previous workflow
            const deployJob = workflowRun.data.outputs.deploy_job;
            const project = workflowRun.data.outputs.project;

            // Set these values as environment variables
            core.exportVariable('DEPLOY_JOB', deployJob);
            core.exportVariable('PROJECT', project);
            return { deployJob, project };

      # Print the validation message using the fetched outputs
      - name: Post-deployment validation message
        run: |
          echo "Validating deployment of job: ${{ env.DEPLOY_JOB }} from project: ${{ env.PROJECT }}"
        shell: bash

#we need our job to do more than print message. 
# jobs:
#   print-message:
#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         os: [macos-latest]

#     steps:
#       # Checkout the code from the repository
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Print the message
#       - name: Print deployment message
#         run: |
#           echo "this string is printed on deployment"
#         shell: bash # By default, bash works across Linux and macOS
        
      
